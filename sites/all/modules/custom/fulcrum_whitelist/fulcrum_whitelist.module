<?php

/**
 * Implements hook_menu().
 */
function fulcrum_whitelist_menu() {
  $items['fulcrum/whitelist/%'] = [
    'page callback'     => 'fulcrum_whitelist',
    'page arguments'    => [2],
    'access callback'   => TRUE,
  ];

  $items['admin/config/fulcrum_whitelist'] = [
    'page callback'     => 'drupal_get_form',
    'page arguments'    => ['fulcrum_whitelist_admin_form'],
    'access arguments'  => ['access administration pages'],
    'type'              => MENU_NORMAL_ITEM,
    'file'              => 'fulcrum_whitelist.admin.inc',
    'file path'         => drupal_get_path('module', 'fulcrum_whitelist') . '/include'
  ];

  return $items;
}

/**
 * Implements hook_cron().
 */
function fulcrum_whitelist_cron() {
  _fulcrum_whitelist_create_tokens();
}

/**
 * Implements hook_theme().
 */
function fulcrum_whitelist_theme($existing, $type, $theme, $path) {
  $mod_path = drupal_get_path('module', 'fulcrum_whitelist');

  return [
    'dechrome' => [
      'template' => 'dechrome',
      'path' => $mod_path . '/templates',
      'variables' => [
        'message' => NULL,
        'js'      => NULL
      ],
    ],
    'javascript' => [
      'template' => 'javascript',
      'path' => $mod_path . '/templates',
      'variables' => [
        'delay' => NULL,
      ],
    ]
  ];
}

/**
 * Make the whitelist tokens
 */
function _fulcrum_whitelist_create_tokens() {
  $config = _fulcrum_whitelist_config();

  $selectSQL = t(
    _fulcrum_whitelist_users_wo_tokens(),
    ['@limit' => $config->token_process_limit]
  );

  // watchdog('fulcrum_whitelist', 'in cron: ' . $selectSQL);

  // find users that dont exist in fulcrum_whitelist entity
  $accounts = db_query($selectSQL)
    ->fetchAll();

  foreach ($accounts as $account) {
    $token = user_password(50);

    $fulcrum_whitelist = entity_create('fulcrum_whitelist', [
      'type' => 'fulcrum_whitelist',
      'title' => $token,
    ]);

    $fulcrum_whitelist->field_fulcrum_whitelist_user = [LANGUAGE_NONE => [0 => ['target_id' => $account->uid]]];

    entity_save('fulcrum_whitelist_entity', $fulcrum_whitelist);

    // log a notice
    watchdog('fulcrum_whitelist', t('Created token for @mail', ['@mail' => $account->mail]));
  }
}

/**
 * Whitelist.
 *
 * @return string
 *   Return Hello string.
 */
function fulcrum_whitelist($authtoken) {
  $config = _fulcrum_whitelist_config();
  $html = _fulcrum_whitelist_dechrome_page($config->misconf_text);

  // don't cache this page
  drupal_page_is_cacheable(FALSE);

  // make sure we are configured
  if (
    ($env_abbr = _fulcrum_whitelist_env_abbr()) &&
    isset($env_abbr) &&
    isset($env_abbr->abbr) &&
    $env_abbr->abbr != 'unkn'
  ) {
    $selectSQL = t(_fulcrum_whitelist_name_email_from_token(), ['@authtoken' => $authtoken]);

    // lookup user by token, make sure there user and token is enabled
    if ((
      $account = db_query($selectSQL)->fetchObject()) &&
      isset($account->mail)
    ) {
      // curl the whitelist with http://172.17.0.16:18888/scvw/prd/1.2.3.4/foo@bar.com
      $params = [
        '@host' => $config->host,
        '@port' => $config->port,
        '@abbr' => $env_abbr->abbr,
        '@env'  => $env_abbr->env,
        '@ip'   => $_SERVER['HTTP_X_CLIENT_IP'], //ip_address(),
        '@mail' => $account->mail,
      ];

      $url = t('http://@host:@port/@abbr/@env/@ip/@mail', $params);

      // add watchdog
      watchdog('fulcrum_whitelist', t(
            'Whitelist UID: @uid mail: @mail url: @url',
            [
              '@url'  => $url,
              '@uid'  => $account->uid,
              '@mail' => $account->mail,
            ]
          )
        );

      $result = file_get_contents($url);

      // return the themed wait redirect
      $html = _fulcrum_whitelist_dechrome_page($config->wait_text, TRUE);
    } else {
      // add watchdog
      watchdog('fulcrum_whitelist', t(
            'Whitelist attempt failed for token: @authtoken',
            ['@authtoken' => $authtoken]
          )
        );

      $html = _fulcrum_whitelist_dechrome_page($config->fail_text);
    }
  }

  print $html;
  drupal_exit();
}

function _fulcrum_whitelist_dechrome_page($message = '', $inc_js = FALSE) {
  $config = _fulcrum_whitelist_config();
  $js = '';

  if ($inc_js) {
    $js_vars = [
      'delay' => $config->delay
    ];

    $js = theme('javascript', $js_vars);
  }

  // return the themed wait redirect
  $vars = [
    'message'    => $message,
    'js'         => $js
  ];

  $html = theme('dechrome', $vars);

  return $html;
}

function _fulcrum_whitelist_env_abbr() {
  if (
    ($fconf = json_decode($_SERVER['FULCRUM_CONF'])) &&
    isset($fconf->env)
  ) {
    $config = _fulcrum_whitelist_config();

    return (object)[
      'env'  => $fconf->env,
      'abbr' => $config->abbr,
    ];
  }

  return false;
}

function _fulcrum_whitelist_config() {
  $config = &drupal_static(__FUNCTION__);

  if (!isset($config)) {
    $defaults = _fulcrum_whitelist_config_defaults();
    $config   = (object)[];

    foreach ($defaults as $name => $default) {
      // first see if there is a stored value, otherwise use default
      $config->$name = variable_get("fulcrum_whitelist_$name", $defaults[$name]);
    }
  }

  return $config;
}

function _fulcrum_whitelist_config_defaults() {
  return [
    'host'                => 'whitelist',
    'port'                => 18888,
    'token_process_limit' => 50,
    'delay'               => 3,
    'abbr'                => 'unkn',
    'wait_text'           => t('Please wait while we authorize this whitelisting'),
    'fail_text'           => t('Your whitelist authorization failed, this has been logged. Please reach out to the sites technical contact'),
    'misconf_text'        => t('Your whitelist configuration is not properly setup, please reach out to the sites technical contact'),
    'docs_intro'          => _fulcrum_whitelist_config_default_docs_intro(),
    'docs_user'           => _fulcrum_whitelist_config_default_docs_user(),
    'docs_admin'          => _fulcrum_whitelist_config_default_docs_admin()
  ];
}

function _fulcrum_whitelist_config_default_docs_intro() {
  return <<<HTML
    <p>This document is intended for current clients using Interpersonal Frequency (I.F.) Fulcrum Drupal-as-a-Service websites and provides an overview for use and administration of controlled access to restricted areas of client sites.</p>

    <p>For security reasons, more sensitive areas of I.F.’s Fulcrum system are inaccessible to the general public including the development, testing and training environments, and production access screens such as <a href="/user">/user</a> and <a href="/admin">/admin</a>. Preventing general public access to these locations reduces security threats such as (distributed) denial of service issues, whether malicious (e.g., botnet attack) or mistakes (e.g., misconfigured search crawlers).</p>

    <p>Our Fulcrum Streamlined Whitelist (FSW) feature allows controlled access to these areas. The FSW URL contains a token that will whitelist your location and redirect you to the correct login page, such as <a href="/user">/user</a>.</p>

    <p>Your organization’s designated site administrator(s) will provide you with an individual FSW URL for your site. </p>
HTML;
}

function _fulcrum_whitelist_config_default_docs_user() {
  return <<<HTML
  <h2>For FSW Users:</h2>
  <ul>
    <li>
      Do not share the FSW URL with others. It is specific to your account and will only work for one account. Any activity with the FSW URL is recorded along with your I.P. for security purposes.
    </li>

    <li>
      If for any reason you inadvertently share your FSW URL via email or other methods with anyone besides your site administrator(s), please contact your site administrator(s) to reset your FSW URL.
    </li>

    <li>
      The FSW URL will not automatically log you in. It will authorize your Internet Address (I.P.) and redirects you to the correct login screen, where you must supply appropriate credentials.
    </li>

    <li>
      The redirect page will not look like your website.
    </li>

    <li>
      If you were previously logged in you will be redirected to your user page, otherwise you will redirected to the login page.
    </li>

    <li>
      If you are an existing Zuul user, it will continue to work. However, we recommend you switch to FSW. While “zuul” will continue to work it will be deprecated in the future.
    </li>
  </ul>
HTML;
}

function _fulcrum_whitelist_config_default_docs_admin() {
  return <<<HTML
  <h2>For FSW Site Administrators:</h2>
  <ul>
    <li>
      I.F. must grant permission to view the FSW URLs.
    </li>

    <li>
      FSW URLs are on your site at the path: <a href="/admin/config/fulcrum_whitelist">/admin/config/fulcrum_whitelist</a>
    </li>

    <li>
      FSW URLs should be exposed only to the particular user associated with the particular URL.
    </li>

    <li>
      Rescinding access requires disabling the user or disabling the FSW URL (both are not required).
    </li>

    <li>
      To create a new FSW URL, delete the existing URL; a replacement URL will be generated automatically within an hour.
    </li>
  </ul>
HTML;
}

function _fulcrum_whitelist_name_email_from_token() {
  return <<<SQL
    SELECT u.uid, u.mail
    FROM {users} u
    JOIN {eck_fulcrum_whitelist} e
    JOIN {field_data_field_fulcrum_whitelist_user}   w ON e.id = w.entity_id AND u.uid = w.field_fulcrum_whitelist_user_target_id
    JOIN {field_data_field_fulcrum_whitelist_status} s ON e.id = s.entity_id AND s.field_fulcrum_whitelist_status_value = 1
    WHERE u.status = 1
    AND e.title = '@authtoken'
SQL;
}

function _fulcrum_whitelist_users_wo_tokens() {
  return <<< SQL
    SELECT u.uid, u.mail
    FROM {users} u
    LEFT JOIN {field_data_field_fulcrum_whitelist_user} w ON u.uid = w.field_fulcrum_whitelist_user_target_id
    WHERE u.status = 1
    AND w.entity_id IS NULL
    LIMIT @limit
SQL;
}
